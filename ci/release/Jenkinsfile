@Library('hibernate-jenkins-pipeline-helpers') _

import org.hibernate.jenkins.pipeline.helpers.version.Version

pipeline {
    agent {
        label 'Release'
    }
    tools {
        maven 'Apache Maven 3.9'
        jdk 'OpenJDK 17 Latest'
    }
    options {
        buildDiscarder logRotator(daysToKeepStr: '30', numToKeepStr: '10')
        disableConcurrentBuilds(abortPrevious: false)
    }
    parameters {
        string(
                name: 'RELEASE_VERSION',
                defaultValue: '',
                description: 'The version to be released, e.g. 7.1.0.Final.',
                trim: true
        )
        string(
                name: 'DEVELOPMENT_VERSION',
                defaultValue: '',
                description: 'The next version to be used after the release, e.g. 7.2.0-SNAPSHOT.',
                trim: true
        )
        booleanParam(
                name: 'RELEASE_DRY_RUN',
                defaultValue: false,
                description: 'If true, just simulate the release, without pushing any commits or tags, and without uploading any artifacts or documentation.'
        )
    }
    stages {
        stage('Release') {
            steps {
                script {
                    // Check that all the necessary parameters are set
                    if (!params.RELEASE_VERSION) {
                        throw new IllegalArgumentException("Missing value for parameter RELEASE_VERSION.")
                    }
                    if (!params.DEVELOPMENT_VERSION) {
                        throw new IllegalArgumentException("Missing value for parameter DEVELOPMENT_VERSION.")
                    }

                    def releaseVersion = Version.parseReleaseVersion(params.RELEASE_VERSION)
                    def developmentVersion = Version.parseDevelopmentVersion(params.DEVELOPMENT_VERSION)
                    echo "Performing full release for version ${releaseVersion.toString()}"

                    withMaven(mavenSettingsConfig: null, mavenLocalRepo: env.WORKSPACE_TMP + '/.m2repository') {
                        configFileProvider([configFile(fileId: 'release.config.ssh', targetLocation: env.HOME + '/.ssh/config'),
                                            configFile(fileId: 'release.config.ssh.knownhosts', targetLocation: env.HOME + '/.ssh/known_hosts')]) {
                            withCredentials([// TODO: Once we switch to maven-central publishing (from nexus2) we need to add a new credentials
                                             //  to use the following env variable names to set the user/password:
                                             //  - JRELEASER_MAVENCENTRAL_USERNAME
                                             //  - JRELEASER_MAVENCENTRAL_TOKEN
                                             //  Also use the new `credentialsId` for Maven Central, e.g.:
                                             //  usernamePassword(credentialsId: '???????', passwordVariable: 'JRELEASER_MAVENCENTRAL_TOKEN', usernameVariable: 'JRELEASER_MAVENCENTRAL_USERNAME'),
                                             usernamePassword(credentialsId: 'ossrh.sonatype.org', passwordVariable: 'JRELEASER_NEXUS2_PASSWORD', usernameVariable: 'JRELEASER_NEXUS2_USERNAME'),
                                             file(credentialsId: 'release.gpg.private-key', variable: 'RELEASE_GPG_PRIVATE_KEY_PATH'),
                                             string(credentialsId: 'release.gpg.passphrase', variable: 'JRELEASER_GPG_PASSPHRASE'),
                                             string(credentialsId: 'Hibernate-CI.github.com', variable: 'JRELEASER_GITHUB_TOKEN')]) {
                                sshagent(['ed25519.Hibernate-CI.github.com']) {
                                    sh 'mvn -v'
                                    sh 'cat $HOME/.ssh/config'
                                    sh 'git clone https://github.com/hibernate/hibernate-release-scripts.git'
                                    env.RELEASE_GPG_HOMEDIR = env.WORKSPACE_TMP + '/.gpg'
                                    sh """
										bash -xe hibernate-release-scripts/release.sh ${params.RELEASE_DRY_RUN ? '-d' : ''} \
												infra-extensions ${releaseVersion.toString()} ${developmentVersion.toString()}
									"""
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
